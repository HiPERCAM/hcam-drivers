#!/usr/bin/env python
from __future__ import print_function, division, unicode_literals
import tqdm
import time

from hcam_widgets.misc import (get_hardware_value,
                               set_hardware_value)
from hcam_widgets.globals import Container
from hcam_drivers.config import load_config
from hcam_drivers.hardware import slide


usage = """
'slide' controls the focal plane slide; it takes a single argument,
with the following possible forms:

    home         -- return the slide to its home position
    park         -- move the focal plane just out of the field
    position     -- return the current slide position
    reset        -- equivalent to powering off and then on
    stop         -- stop the device during a move
    enable       -- enable potentiometer on back of slide
    disable      -- disable potentiometer on back of slide
    +<off>       -- add 'off' pixels to current position
    -<off>       -- subtract 'off' pixels from current position
    pos=<pos>    -- go to absolute position of 'pos' pixels

    Hitting <Ctrl-C> will terminate a move that has already started.
"""

MIN_TIMEOUT = 2  # seconds


def action(command, estimated_time, args=()):
    """
    Run a long running slide command, stopping on <Ctrl-C>
    """
    tstep = 0.1
    pbar = tqdm.tqdm(total=int(estimated_time/tstep),
                     ncols=40, leave=False,
                     bar_format='{l_bar}{bar} | {remaining}')
    future_result = command() if args is None else command(*args)
    try:
        while not future_result.ready:
            pbar.update(1)
            time.sleep(tstep)
    except KeyboardInterrupt:
        raise  # re-raise so calling thread can stop slide
    value, msg = future_result.value
    print('\n\n' + msg)


def parse_position(pos_str):
    return float(pos_str.split('=')[1].split()[0])


if __name__ == "__main__":

    # read defaults from hdriver config file
    g = Container()
    g.cpars = dict()
    load_config(g)
    cpars = g.cpars

    import sys
    try:
        comm = sys.argv[1]
    except IndexError:
        print(usage)
        sys.exit(-1)

    timeout = MIN_TIMEOUT

    long_running = False
    if comm == 'home':
        def command():
            result = set_hardware_value(cpars, 'slide', 'home', background=True)
            return result
        long_running = True

    elif comm == 'park':
        def command():
            result = set_hardware_value(cpars, 'slide', 'position',
                                        slide.UNBLOCK_POS, background=True)
            return result
        long_running = True

    elif comm == 'position':
        def command():
            print('\n\n'+get_hardware_value(cpars, 'slide', 'position'))

    elif comm == 'reset':
        def command():
            msg = set_hardware_value(cpars, 'slide', 'reset')
            print('\n\n'+msg)

    elif comm == 'stop':
        def command():
            val, msg = set_hardware_value(cpars, 'slide', 'stop')
            print('\n\n'+msg)

    elif comm == 'enable':
        def command():
            msg = set_hardware_value(cpars, 'slide', 'enable')
            print('\n\n'+msg)

    elif comm == 'disable':
        def command():
            msg = set_hardware_value(cpars, 'slide', 'disable')
            print('\n\n'+msg)

    elif comm.startswith('+'):
        try:
            offset = int(comm[1:])
        except ValueError:
            raise ValueError('offset {} not understood'.format(comm))

        long_running = True

        def command():
            current_position = parse_position(get_hardware_value(cpars, 'slide', 'position'))
            new_position = current_position + offset
            result = set_hardware_value(cpars, 'slide', 'position', new_position, background=True)
            return result

    elif comm.startswith('-'):
        long_running = True
        try:
            offset = int(comm[1:])
        except ValueError:
            raise ValueError('offset {} not understood'.format(comm))

        def command():
            current_position = parse_position(get_hardware_value(cpars, 'slide', 'position'))
            new_position = current_position - offset
            result = set_hardware_value(cpars, 'slide', 'position', new_position, background=True)
            return result

    elif comm.startswith('pos='):
        long_running = True
        try:
            position = int(comm.split('=')[1])
        except ValueError:
            raise ValueError('position {} not understood'.format(comm))

        def command():
            result = set_hardware_value(cpars, 'slide', 'position', position, background=True)
            return result

    else:
        print('Command not recognised!')
        print(usage)

    try:
        if long_running:
            action(command, timeout)
        else:
            command()
    except KeyboardInterrupt:
        # handle keyboardinterrupt
        msg = set_hardware_value(cpars, 'slide', 'stop')
        print('\n\n'+msg)
